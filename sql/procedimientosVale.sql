ALTER SESSION SET CURRENT_SCHEMA = BLUE;

-- -- DistrictManager Package
-- CREATE OR REPLACE PACKAGE DistrictManager AS
--     PROCEDURE insertDistrict(pName VARCHAR2, pCityId NUMBER);
--     PROCEDURE deleteDistrict(pDistrictId NUMBER);
--     PROCEDURE updateDistrict(pDistrictId NUMBER, pName VARCHAR2, pCityId NUMBER);
--     FUNCTION getDistricts(pDistrictId NUMBER DEFAULT NULL, pName VARCHAR2 DEFAULT NULL, pCityId NUMBER DEFAULT NULL)
--         RETURN SYS_REFCURSOR;
-- END DistrictManager;
--
-- CREATE OR REPLACE PACKAGE BODY DistrictManager AS
--     PROCEDURE insertDistrict(pName VARCHAR2, pCityId NUMBER)
--     AS
--     BEGIN
--         INSERT INTO District (id, name, cityId)
--         VALUES (s_district.NEXTVAL, pName, pCityId);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred.');
--     END insertDistrict;
--
--     PROCEDURE deleteDistrict(pDistrictId NUMBER)
--     IS
--     eNoDistrictId EXCEPTION;
--     BEGIN
--         DELETE FROM District
--         WHERE DISTRICT.id = pDistrictId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE eNoDistrictId;
--         END IF;
--     EXCEPTION
--         WHEN deleteDistrict.eNoDistrictId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'District does not exist in the database.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END deleteDistrict;
--
--     PROCEDURE updateDistrict(pDistrictId NUMBER, pName VARCHAR2, pCityId NUMBER)
--     IS
--         eNoDistrictId EXCEPTION;
--     BEGIN
--         UPDATE District
--         SET name = NVL(pName, name),
--             cityId = NVL(pCityId, cityId)
--         WHERE id = pDistrictId;
--         IF SQL%NOTFOUND THEN
--             RAISE updateDistrict.eNoDistrictId;
--         END IF;
--     EXCEPTION
--         WHEN eNoDistrictId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'District not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END updateDistrict;
--
--     FUNCTION getDistricts(
--         pDistrictId NUMBER DEFAULT NULL,
--         pName VARCHAR2 DEFAULT NULL,
--         pCityId NUMBER DEFAULT NULL
--     ) RETURN SYS_REFCURSOR
--     AS
--         vcDistricts SYS_REFCURSOR;
--     BEGIN
--         OPEN vcDistricts FOR
--             SELECT
--                 d.name,
--                 d.createdBy,
--                 d.createdDateTime,
--                 d.updatedBy,
--                 d.updatedDateTime,
--                 d.cityId,
--                 c.name cityName
--             FROM
--                 district d
--                 inner join city c ON d.cityId = c.id
--             WHERE
--                 d.id = NVL(pDistrictId, d.id)
--                 AND d.name LIKE '%' || NVL(pName, d.name) || '%'
--                 AND c.ID = NVL(pCityId, c.Id);
--     EXCEPTION
--         when NO_DATA_FOUND then
--             RAISE_APPLICATION_ERROR(-20001, 'No district found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         RETURN (vcDistricts);
--     END getDistricts;
--
-- END DistrictManager;
--
-- -- CityManager Package
-- CREATE OR REPLACE PACKAGE CityManager AS
--     PROCEDURE insertCity(pName VARCHAR2, pProvinceId NUMBER);
--     PROCEDURE deleteCity(pCityId NUMBER);
--     PROCEDURE updateCity(pCityId NUMBER, pName VARCHAR2, pProvinceId NUMBER);
--     FUNCTION getCities(pCityId NUMBER DEFAULT NULL, pName VARCHAR2 DEFAULT NULL, pProvinceId NUMBER DEFAULT NULL)
--         RETURN SYS_REFCURSOR;
-- END CityManager;
--
-- CREATE OR REPLACE PACKAGE BODY CityManager AS
--
--     PROCEDURE insertCity(pName VARCHAR2, pProvinceId NUMBER)
--     AS
--     BEGIN
--         INSERT INTO City (id, name, provinceId)
--         VALUES (s_city.NEXTVAL, pName, pProvinceId);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred.');
--     END insertCity;
--
--     PROCEDURE deleteCity(pCityId NUMBER)
--     AS
--         eNoCityId EXCEPTION;
--     BEGIN
--         DELETE FROM City
--         WHERE City.id = pCityId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE deleteCity.eNoCityId;
--         END IF;
--     EXCEPTION
--         WHEN deleteCity.eNoCityId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'City does not exist in the database.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END deleteCity;
--
--     PROCEDURE updateCity(pCityId NUMBER, pName VARCHAR2, pProvinceId NUMBER)
--     AS
--         eNoCityId EXCEPTION;
--     BEGIN
--         UPDATE City
--         SET name = NVL(pName, name),
--             provinceId = NVL(pProvinceId, provinceId)
--         WHERE id = pCityId;
--         IF SQL%NOTFOUND THEN
--             RAISE updateCity.eNoCityId;
--         END IF;
--     EXCEPTION
--         WHEN updateCity.eNoCityId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'City not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END updateCity;
--
--     FUNCTION getCities(
--         pCityId NUMBER DEFAULT NULL,
--         pName VARCHAR2 DEFAULT NULL,
--         pProvinceId NUMBER DEFAULT NULL)
--     RETURN SYS_REFCURSOR
--     AS
--         vcCities SYS_REFCURSOR;
--     BEGIN
--         OPEN vcCities FOR
--             SELECT
--                 c.name,
--                 c.createdBy,
--                 c.createdDateTime,
--                 c.updatedBy,
--                 c.updatedDateTime,
--                 p.name provinceName
--             FROM
--                 City c
--                 INNER JOIN Province p ON c.provinceId = p.id
--             WHERE
--                 c.id = NVL(pCityId, c.id)
--                 AND c.name LIKE '%' || NVL(pName, c.name) || '%'
--                 AND p.ID = NVL(pProvinceId, p.id);
--     EXCEPTION
--         when NO_DATA_FOUND then
--             RAISE_APPLICATION_ERROR(-20001, 'No city found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         RETURN (vcCities);
--         COMMIT;
--     END getCities;
--
-- END CityManager;
--
-- -- ProvinceManager Package
-- CREATE OR REPLACE PACKAGE ProvinceManager AS
--     PROCEDURE insertProvince(pName VARCHAR2, pCountryId NUMBER);
--     PROCEDURE deleteProvince(pProvinceId NUMBER);
--     PROCEDURE updateProvince(pProvinceId NUMBER, pName VARCHAR2, pCountryId NUMBER);
--     FUNCTION getProvinces(pProvinceId NUMBER DEFAULT NULL, pName VARCHAR2 DEFAULT NULL, pCountryId NUMBER DEFAULT NULL)
--         RETURN SYS_REFCURSOR;
-- END ProvinceManager;
--
-- CREATE OR REPLACE PACKAGE BODY ProvinceManager AS
--
--     PROCEDURE insertProvince(pName VARCHAR2, pCountryId NUMBER)
--     AS
--     BEGIN
--         INSERT INTO Province (id, name, countryId)
--         VALUES (s_province.NEXTVAL, pName, pCountryId);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred.');
--     END insertProvince;
--
--     PROCEDURE deleteProvince(pProvinceId NUMBER)
--     AS
--         eNoProvinceId EXCEPTION;
--     BEGIN
--         DELETE FROM Province
--         WHERE Province.id = pProvinceId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE eNoProvinceId;
--         END IF;
--     EXCEPTION
--         WHEN deleteProvince.eNoProvinceId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Province does not exist in the database.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END deleteProvince;
--
--     PROCEDURE updateProvince(pProvinceId NUMBER, pName VARCHAR2, pCountryId NUMBER)
--     AS
--         eNoProvinceId EXCEPTION;
--     BEGIN
--         UPDATE Province
--         SET name = NVL(pName, name),
--             countryId = NVL(pCountryId, countryId)
--         WHERE id = pProvinceId;
--         IF SQL%NOTFOUND THEN
--             RAISE updateProvince.eNoProvinceId;
--         END IF;
--     EXCEPTION
--         WHEN updateProvince.eNoProvinceId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Province not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--     END updateProvince;
--
--     FUNCTION getProvinces(
--         pProvinceId NUMBER DEFAULT NULL,
--         pName VARCHAR2 DEFAULT NULL,
--         pCountryId  NUMBER DEFAULT NULL)
--     RETURN SYS_REFCURSOR
--     AS
--         vcProvinces SYS_REFCURSOR;
--     BEGIN
--         OPEN vcProvinces FOR
--             SELECT
--                 p.name AS provinceName,
--                 p.createdBy,
--                 p.createdDateTime,
--                 p.updatedBy,
--                 p.updatedDateTime,
--                 cc.name AS countryName
--             FROM
--                 Province p
--                 INNER JOIN Country cc ON p.countryId = cc.id
--             WHERE
--                 p.id = NVL(pProvinceId, p.id)
--                 AND p.name LIKE '%' || NVL(pName, p.name) || '%'
--                 AND cc.id = NVL(pCountryId, cc.id);
--     EXCEPTION
--         when NO_DATA_FOUND then
--                 RAISE_APPLICATION_ERROR(-20001, 'No province found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         RETURN (vcProvinces);
--     COMMIT;
--     END getProvinces;
--
-- END ProvinceManager;
--
-- -- CountryManager Package
-- CREATE OR REPLACE PACKAGE CountryManager AS
--     PROCEDURE insertCountry(pName VARCHAR2);
--     PROCEDURE deleteCountry(pCountryId NUMBER);
--     PROCEDURE updateCountry(pCountryId NUMBER, pName VARCHAR2);
--     FUNCTION getCountries(pCountryId NUMBER DEFAULT NULL, pName VARCHAR2 DEFAULT NULL)
--         RETURN SYS_REFCURSOR;
-- END CountryManager;
--
-- CREATE OR REPLACE PACKAGE BODY CountryManager AS
--
--     PROCEDURE insertCountry(pName VARCHAR2)
--     AS
--     BEGIN
--         INSERT INTO Country (id, name)
--         VALUES (s_country.NEXTVAL, pName);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred.');
--     END insertCountry;
--
--     PROCEDURE deleteCountry(pCountryId NUMBER)
--     AS
--         eNoCountryId EXCEPTION;
--     BEGIN
--         DELETE FROM Country
--         WHERE Country.id = pCountryId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE deleteCountry.eNoCountryId;
--         END IF;
--     EXCEPTION
--         WHEN deleteCountry.eNoCountryId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Country does not exist in the database.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END deleteCountry;
--
--     PROCEDURE updateCountry(pCountryId NUMBER, pName VARCHAR2)
--     AS
--         eNoCountryId EXCEPTION;
--     BEGIN
--         UPDATE Country
--         SET name = NVL(pName, name)
--         WHERE id = pCountryId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE eNoCountryId;
--         END IF;
--     EXCEPTION
--         WHEN eNoCountryId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Country not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END updateCountry;
--
--     FUNCTION getCountries(
--         pCountryId NUMBER DEFAULT NULL,
--         pName      VARCHAR2 DEFAULT NULL
--     ) RETURN SYS_REFCURSOR
--     AS
--         vcCountries SYS_REFCURSOR;
--     BEGIN
--         OPEN vcCountries FOR
--             SELECT
--                 name,
--                 createdBy,
--                 createdDateTime,
--                 updatedBy,
--                 updatedDateTime
--             FROM
--                 Country
--             WHERE
--                 id = NVL(pCountryId, id)
--                 AND name LIKE '%' || NVL(pName, name) || '%';
--
--     EXCEPTION
--         when NO_DATA_FOUND then
--             RAISE_APPLICATION_ERROR(-20001, 'No country found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         RETURN (vcCountries);
--         COMMIT;
--     END getCountries;
--
-- END CountryManager;

-- ProductManager Package
-- CREATE OR REPLACE PACKAGE ProductManager AS
--     PROCEDURE insertProduct(pDescription VARCHAR2, pPhotoUrl VARCHAR2, pCost FLOAT, pAuthorizedEntityId NUMBER);
--     PROCEDURE deleteProduct(pProductId NUMBER);
--     PROCEDURE updateProduct(pProductId NUMBER, pDescription VARCHAR2, pPhotoUrl VARCHAR2, pCost FLOAT, pAuthorizedEntityId NUMBER);
--     FUNCTION getProducts(pProductId NUMBER DEFAULT NULL, pDescription VARCHAR2 DEFAULT NULL, pAuthorizedEntityId NUMBER DEFAULT NULL) RETURN SYS_REFCURSOR;
--     FUNCTION getProductsRedeemRanking RETURN SYS_REFCURSOR;
--     FUNCTION getProductsByCommerce(commerce_id IN NUMBER) RETURN SYS_REFCURSOR;
--     FUNCTION getTop5Products RETURN SYS_REFCURSOR;
--     FUNCTION getTotalProductsRedeemed RETURN SYS_REFCURSOR;
-- END ProductManager;

-- CREATE OR REPLACE PACKAGE BODY ProductManager AS
--
--     PROCEDURE insertProduct(pDescription VARCHAR2, pPhotoUrl VARCHAR2, pCost FLOAT, pAuthorizedEntityId NUMBER)
--     AS
--     BEGIN
--         INSERT INTO Product (id, description, photoUrl, cost, authorizedEntityId)
--         VALUES (s_product.NEXTVAL, pDescription, pPhotoUrl, pCost, pAuthorizedEntityId);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred.');
--     END insertProduct;
--
--     PROCEDURE deleteProduct(pProductId NUMBER)
--     AS
--         eNoProductId EXCEPTION;
--     BEGIN
--         DELETE FROM Product
--         WHERE Product.id = pProductId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE deleteProduct.eNoProductId;
--         END IF;
--     EXCEPTION
--         WHEN deleteProduct.eNoProductId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Product does not exist in the database.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END deleteProduct;
--
--     PROCEDURE updateProduct(pProductId NUMBER, pDescription VARCHAR2, pPhotoUrl VARCHAR2, pCost FLOAT, pAuthorizedEntityId NUMBER)
--     AS
--         eNoProductId EXCEPTION;
--     BEGIN
--         UPDATE Product
--         SET description = NVL(pDescription, description),
--             photoUrl = NVL(pPhotoUrl, photoUrl),
--             cost  = NVL(pCost, cost),
--             authorizedEntityId = NVL(pAuthorizedEntityId, authorizedEntityId)
--         WHERE id = pProductId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE updateProduct.eNoProductId;
--         END IF;
--     EXCEPTION
--         WHEN updateProduct.eNoProductId THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Product not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END updateProduct;
--
--     FUNCTION getProducts(
--         pProductId NUMBER DEFAULT NULL,
--         pDescription VARCHAR2 DEFAULT NULL,
--         pAuthorizedEntityId NUMBER DEFAULT NULL)
--     RETURN SYS_REFCURSOR
--     AS
--         vcProducts SYS_REFCURSOR;
--     BEGIN
--         OPEN vcProducts FOR
--             SELECT
--                 p.id,
--                 p.description,
--                 p.cost,
--                 p.photoUrl,
--                 p.createdBy,
--                 p.createdDateTime,
--                 p.updatedBy,
--                 p.updatedDateTime,
--                 ae.name AS authorizedEntity
--             FROM
--                 Product p
--                 INNER JOIN AuthorizedEntity ae ON p.authorizedEntityId = ae.id
--             WHERE
--                 p.id = NVL(pProductId, p.id)
--                 AND p.description LIKE '%' || NVL(pDescription, p.description) || '%'
--                 AND ae.id = NVL(pAuthorizedEntityId, ae.id);
--     EXCEPTION
--         when NO_DATA_FOUND then
--             RAISE_APPLICATION_ERROR(-20001, 'No product found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         RETURN (vcProducts);
--         COMMIT;
--     END getProducts;
--
-- /*4.10 Módulo de Consultas/ D
--    Listado de productos con mayor solicitud de canje y sus respectivos comercios.
-- */
--     FUNCTION getProductsRedeemRanking
--     RETURN SYS_REFCURSOR
--     AS
--         vcProductRanking SYS_REFCURSOR;
--     BEGIN
--         OPEN vcProductRanking FOR
--             SELECT
--                 P.description AS product_description,
--                 NVL(CC.name, AB.name) AS commerce_name,
--                 SUM(PU.quantity) AS total_canje
--             FROM PRODUCT P
--                 INNER JOIN PRODUCTXUSER PU ON PU.productid = P.id
--                 INNER JOIN AUTORIZEDENTITY AE ON AE.id = P.authorizedentityid
--                 LEFT JOIN COLLECTIONCENTER CC ON CC.ID = AE.id
--                 LEFT JOIN AFFILIATEDBUSINESS AB ON AB.id = AE.id
--             GROUP BY
--                 P.description, NVL(CC.name, AB.name)
--             ORDER BY
--                 total_canje DESC;
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while retrieving Product ranking.');
--         RETURN (vcProductRanking);
--         COMMIT;
--     END getProductsRedeemRanking;
--
-- /*4.11 Módulo de Consultas para comercios afiliados A,B,C*/
-- /*A) Listado de productos que ofrecen los comercios afiliados*/
--     FUNCTION getProductsByCommerce(commerce_id IN NUMBER)
--     RETURN SYS_REFCURSOR
--     AS
--         vcProductsByCommerce SYS_REFCURSOR;
--     BEGIN
--         OPEN vcProductsByCommerce FOR
--             SELECT
--                 P.description AS product_description,
--                 P.cost AS cost,
--                 P.photourl AS photo
--             FROM product P
--                 INNER JOIN authorizedentity AE ON AE.id = P.authorizedentityid
--                 INNER JOIN affiliatedbusiness AB ON AB.id = AE.id
--             WHERE AB.id = commerce_id
--             ORDER BY P.description;
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while retrieving Products by Commerce.');
--         RETURN (vcProductsByCommerce);
--         COMMIT;
--     END getProductsByCommerce;
--
-- /*B) Top 5 de productos más canjeados*/
--     FUNCTION getTop5Products
--     RETURN SYS_REFCURSOR
--     AS
--         vcTopProducts SYS_REFCURSOR;
--     BEGIN
--         OPEN vcTopProducts FOR
--             SELECT
--                 P.description AS product_description,
--                 NVL(CC.name, AB.name) AS commerce_name,
--                 SUM(PU.quantity) AS total_redemptions
--             FROM product P
--                 JOIN productxuser PU ON PU.productid = P.id
--                 JOIN authorizedentity AE ON AE.id = P.authorizedentityid
--                 LEFT JOIN collectioncenter CC ON CC.id = AE.id
--                 LEFT JOIN affiliatedbusiness AB ON AB.id = AE.id
--             GROUP BY P.description, NVL(CC.name, AB.name)
--             ORDER BY total_redemptions DESC
--             FETCH FIRST 5 ROWS ONLY;
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while retrieving Top 5 Products.');
--         RETURN (vcTopProducts);
--         COMMIT;
--     END getTop5Products;
--
-- /*4.14 Módulo de Estadísticas/ D
-- c) Total de productos canjeados por mes y por año.*/
--     FUNCTION getTotalProductsRedeemed
--     RETURN SYS_REFCURSOR
--     AS
--         vcProductsRedeemed SYS_REFCURSOR;
--     BEGIN
--         OPEN vcProductsRedeemed FOR
--             SELECT
--                 EXTRACT(YEAR FROM pu.createdDateTime)  AS year,
--                 EXTRACT(MONTH FROM pu.createdDateTime) AS month,
--                 SUM(pu.quantity) AS total_redeemed
--             FROM productxuser pu
--             GROUP BY
--                 EXTRACT(YEAR FROM pu.createdDateTime),
--                 EXTRACT(MONTH FROM pu.createdDateTime)
--             ORDER BY
--                 year DESC, month DESC;
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while retrieving total redemptions by month and year.');
--         RETURN (vcProductsRedeemed);
--         COMMIT;
--     END getTotalProductsRedeemed;
-- END ProductManager;

-- CREATE OR REPLACE PACKAGE ProductxUserManager AS
--     PROCEDURE insertProductRedeem(pUserId NUMBER, pProductId  NUMBER, pQuantity   NUMBER);
--     FUNCTION getProductRedeems(pUserId NUMBER DEFAULT NULL, pProductId NUMBER);
-- END ProductxUserManager;

-- CREATE OR REPLACE PACKAGE BODY ProductxUserManager AS
--
--     PROCEDURE insertProductRedeem(pUserId NUMBER, pProductId  NUMBER, pQuantity   NUMBER)
--     AS
--         vTotalUserPoints NUMBER := 0;
--         vProductCost NUMBER := 0;
--         vTotalCost NUMBER := 0;
--     BEGIN
--         -- 1) Calcular puntos totales disponibles del usuario
--         SELECT NVL(SUM(TO_NUMBER(uc.kilograms) * pc.pointsPerKg), 0)
--         INTO vTotalUserPoints
--         FROM UserXCollectionCenter uc
--         JOIN PointsConvertion pc ON pc.id = uc.pointsConvertion
--         WHERE uc.userId = pUserId;
--
--         -- 2) Obtener costo del producto
--         SELECT cost
--         INTO vProductCost
--         FROM Product
--         WHERE id = pProductId;
--         -- 3) Calcular costo total del canje
--         vTotalCost := vProductCost * pQuantity;
--
--         -- 4) Validación de puntos suficientes
--         IF vTotalUserPoints < vTotalCost THEN
--             RAISE_APPLICATION_ERROR(-20001,
--                 'User does not have enough points to redeem this product.');
--         END IF;
--
--         -- 5) Insertar canje en ProductXUser
--         INSERT INTO ProductXUser (id, userId, productId, quantity)
--         VALUES (s_productxuser.NEXTVAL, pUserId, pProductId, pQuantity);
--
--         -- 6) Descontar puntos desde UserXCollectionCenter
--         FOR rec IN (
--             SELECT uc.id, TO_NUMBER(uc.kilograms) * pc.pointsPerKg AS availablePoints
--             FROM UserXCollectionCenter uc
--             JOIN PointsConvertion pc ON pc.id = uc.pointsConvertion
--             WHERE uc.userId = pUserId
--             ORDER BY uc.createdDateTime ASC
--         ) LOOP
--             IF vTotalCost <= 0 THEN
--                 EXIT;
--             END IF;
--
--             IF rec.availablePoints >= vTotalCost THEN
--                 UPDATE UserXCollectionCenter
--                 SET kilograms = TO_CHAR(
--                     (rec.availablePoints - vTotalCost) / pc.pointsPerKg
--                 )
--                 WHERE id = rec.id;
--                 vTotalCost := 0;
--             ELSE
--                 UPDATE UserXCollectionCenter
--                 SET kilograms = '0'
--                 WHERE id = rec.id;
--                 vTotalCost := vTotalCost - rec.availablePoints;
--             END IF;
--         END LOOP;
--
--         COMMIT;
--
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred during product redemption.');
--     END insertProductRedeem;
-- END ProductxUserManager;

-- PointsConvertionManager Package
-- CREATE OR REPLACE PACKAGE PointsConvertionManager AS
--     PROCEDURE insertPointsConvertion(pName NUMBER, pPointsPerKg NUMBER, pValueInCurrency NUMBER, pCurrencyId NUMBER, pMaterialTypeId NUMBER);
--     PROCEDURE deletePointsConvertion(pId NUMBER);
--     PROCEDURE updatePointsConvertion(pId NUMBER, pName NUMBER, pPointsPerKg NUMBER, pValueInCurrency NUMBER, pCurrencyId NUMBER, pMaterialTypeId NUMBER);
--     FUNCTION getPointsConvertion(pId NUMBER DEFAULT NULL, pName NUMBER DEFAULT NULL, pCurrencyId NUMBER DEFAULT NULL, pMaterialTypeId NUMBER DEFAULT NULL) RETURN SYS_REFCURSOR;
-- END PointsConvertionManager;
--
-- CREATE OR REPLACE PACKAGE BODY PointsConvertionManager AS
--
--     PROCEDURE insertPointsConvertion(pName NUMBER, pPointsPerKg NUMBER, pValueInCurrency NUMBER, pCurrencyId NUMBER, pMaterialTypeId NUMBER)
--     AS
--     BEGIN
--         INSERT INTO PointsConvertion (id, name, pointsPerKg, valueInCurrency, CurrencyId, MaterialTypeId)
--         VALUES (s_pointsconvertion.NEXTVAL, pName, pPointsPerKg, pValueInCurrency, pCurrencyId, pMaterialTypeId);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred.');
--     END insertPointsConvertion;
--
--     PROCEDURE deletePointsConvertion(pId NUMBER)
--     AS
--         eNoRecordFound EXCEPTION;
--     BEGIN
--         DELETE FROM PointsConvertion
--         WHERE id = pId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE deletePointsConvertion.eNoRecordFound;
--         END IF;
--     EXCEPTION
--         WHEN deletePointsConvertion.eNoRecordFound THEN
--             RAISE_APPLICATION_ERROR(-20001, 'PointsConvertion record does not exist.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         COMMIT;
--     END deletePointsConvertion;
--
--     PROCEDURE updatePointsConvertion(pId NUMBER, pName NUMBER, pPointsPerKg NUMBER, pValueInCurrency NUMBER, pCurrencyId NUMBER, pMaterialTypeId NUMBER)
--     AS
--         eNoRecordFound EXCEPTION;
--     BEGIN
--         UPDATE PointsConvertion
--         SET name = NVL(pName, name),
--             pointsPerKg = NVL(pPointsPerKg, pointsPerKg),
--             valueInCurrency = NVL(pValueInCurrency, valueInCurrency),
--             CurrencyId = NVL(pCurrencyId, CurrencyId),
--             MaterialTypeId = NVL(pMaterialTypeId, MaterialTypeId)
--         WHERE id = pId;
--         IF SQL%NOTFOUND THEN
--             RAISE updatePointsConvertion.eNoRecordFound;
--         END IF;
--     EXCEPTION
--         WHEN updatePointsConvertion.eNoRecordFound THEN
--             RAISE_APPLICATION_ERROR(-20001, 'PointsConvertion record not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--     END updatePointsConvertion;
--
--     FUNCTION getPointsConvertion(pId NUMBER DEFAULT NULL, pName NUMBER DEFAULT NULL, pCurrencyId NUMBER DEFAULT NULL, pMaterialTypeId NUMBER DEFAULT NULL)
--     RETURN SYS_REFCURSOR
--     AS
--         vcPointsConvertion SYS_REFCURSOR;
--     BEGIN
--         OPEN vcPointsConvertion FOR
--             SELECT
--                 pc.id,
--                 pc.name,
--                 pc.pointsPerKg,
--                 pc.valueInCurrency,
--                 c.code AS currencyCode,
--                 m.name AS materialTypeName
--             FROM
--                 PointsConvertion pc
--                 INNER JOIN Currency c ON pc.CurrencyId = c.id
--                 INNER JOIN MaterialType m ON pc.MaterialTypeId = m.id
--             WHERE
--                 pc.id = NVL(pId, pc.id)
--                 AND pc.name = NVL(pName, pc.name)
--                 AND c.id = NVL(pCurrencyId, c.id)
--                 AND m.id = NVL(pMaterialTypeId, m.id);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred.');
--         RETURN (vcPointsConvertion);
--         COMMIT;
--     END getPointsConvertion;
-- END PointsConvertionManager;

-- CurrencyManager Package
-- CREATE OR REPLACE PACKAGE CurrencyManager AS
--     PROCEDURE insertCurrency(pCode VARCHAR2, pSymbol VARCHAR2);
--     PROCEDURE deleteCurrency(pCurrencyId NUMBER);
--     PROCEDURE updateCurrency(pCurrencyId NUMBER, pCode VARCHAR2, pSymbol VARCHAR2);
--     FUNCTION getCurrencies(pCurrencyId NUMBER DEFAULT NULL, pCode VARCHAR2 DEFAULT NULL, pSymbol VARCHAR2 DEFAULT NULL) RETURN SYS_REFCURSOR;
-- END CurrencyManager;
--
-- CREATE OR REPLACE PACKAGE BODY CurrencyManager AS
--
--     PROCEDURE insertCurrency(pCode VARCHAR2, pSymbol VARCHAR2)
--     AS
--     BEGIN
--         INSERT INTO Currency (id, code, symbol)
--         VALUES (s_currency.NEXTVAL, pCode, pSymbol);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Unexpected error occurred while inserting currency.');
--     END insertCurrency;
--
--     PROCEDURE deleteCurrency(pCurrencyId NUMBER)
--     AS
--         eNoRecordFound EXCEPTION;
--     BEGIN
--         DELETE FROM Currency
--         WHERE id = pCurrencyId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE deleteCurrency.eNoRecordFound;
--         END IF;
--     EXCEPTION
--         WHEN deleteCurrency.eNoRecordFound THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Currency not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while deleting currency.');
--         COMMIT;
--     END deleteCurrency;
--
--     PROCEDURE updateCurrency(pCurrencyId NUMBER, pCode VARCHAR2, pSymbol VARCHAR2)
--     AS
--         eNoRecordFound EXCEPTION;
--     BEGIN
--         UPDATE Currency
--         SET code = NVL(pCode, code),
--             symbol = NVL(pSymbol, symbol)
--         WHERE id = pCurrencyId;
--
--         IF SQL%NOTFOUND THEN
--             RAISE updateCurrency.eNoRecordFound;
--         END IF;
--     EXCEPTION
--         WHEN updateCurrency.eNoRecordFound THEN
--             RAISE_APPLICATION_ERROR(-20001, 'Currency not found.');
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while updating currency.');
--         COMMIT;
--     END updateCurrency;
--
--     FUNCTION getCurrencies(pCurrencyId NUMBER DEFAULT NULL, pCode VARCHAR2 DEFAULT NULL, pSymbol VARCHAR2 DEFAULT NULL)
--     RETURN SYS_REFCURSOR
--     AS
--         vcCurrency SYS_REFCURSOR;
--     BEGIN
--         OPEN vcCurrency FOR
--             SELECT id, code, symbol
--             FROM Currency
--             WHERE id = NVL(pCurrencyId, id)
--             AND code = NVL(pCode, code)
--             AND symbol = NVL(pSymbol, symbol);
--         RETURN (vcCurrency);
--     EXCEPTION
--         WHEN OTHERS THEN
--             RAISE_APPLICATION_ERROR(-20002, 'Unexpected error occurred while retrieving currencies.');
--
--
--     END getCurrencies;
-- END CurrencyManager;





